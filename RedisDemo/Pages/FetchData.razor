@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using RedisDemo.Data
@using RedisDemo.Extensions;
@inject IDistributedCache cache;
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<button class="btn btn-primary" @onclick="LoadForecast" Load Forecast></button>
@if(forecasts is null && loadLocation == string.Empty)
{
<p><em>Click the button to load the forecast</em></p>
    
}
 
else if (forecasts == null)
{
<p><em>Loading...</em></p>
}

else
{
    <div class = "h3 @isCacheData">@loadLocation</div>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string loadLocation = "";
    private string isCacheData = "";
   
    private async Task LoadForecast()
    {
        this.forecasts = null;
        this.loadLocation = string.Empty;
        string recordKey = $"WeatherForecast_{DateTime.Now.ToString("yyyyMMdd_hhmm")}";

        this.forecasts = await this.cache.GetRecordAsync<WeatherForecast[]>(recordKey);
        if (forecasts == null)
        {
            this.forecasts = await this.ForecastService.GetForecastAsync(DateTime.Now);
            this.loadLocation = $"Loaded from API at {DateTime.Now}";
            this.isCacheData = string.Empty;
            await cache.SetRecordAsync(recordKey, this.forecasts);
        }
        else
        {
            this.loadLocation = $"Loaded from cache at {DateTime.Now}";
            this.isCacheData = "text-danger";
        }
    }
}
